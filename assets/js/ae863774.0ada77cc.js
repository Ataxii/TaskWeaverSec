"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5675],{2929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(5893),s=n(1151);const a={},o="Customizing Examples",i={id:"customization/example/example",title:"Customizing Examples",description:"There are two types of examples: (1) planning examples and (2) code interpreter examples.",source:"@site/docs/customization/example/example.md",sourceDirName:"customization/example",slug:"/customization/example/",permalink:"/TaskWeaver/docs/customization/example/",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/TaskWeaver/tree/docs/website/docs/customization/example/example.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"How to develop a new plugin",permalink:"/TaskWeaver/docs/plugin/how_to_develop_a_new_plugin"},next:{title:"Prompt Compression",permalink:"/TaskWeaver/docs/compression"}},h={},c=[{value:"Planning Examples",id:"planning-examples",level:2},{value:"Code Interpreter Examples",id:"code-interpreter-examples",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"customizing-examples",children:"Customizing Examples"}),"\n",(0,r.jsx)(t.p,{children:"There are two types of examples: (1) planning examples and (2) code interpreter examples.\r\nPlanning examples are used to demonstrate how to use TaskWeaver to plan for a specific task.\r\nCode generation examples are used to demonstrate how to generate code or orchestrate plugins to perform a specific task."}),"\n",(0,r.jsx)(t.h2,{id:"planning-examples",children:"Planning Examples"}),"\n",(0,r.jsxs)(t.p,{children:["A planning example tells LLMs how to plan for a specific query from the user; talk to the code interpreter;\r\nreceive the execution result from the code interpreter; and summarize the execution result.\r\nBefore constructing the planning example, we strongly encourage you to go through the\r\n",(0,r.jsx)(t.a,{href:"https://github.com/microsoft/TaskWeaver/blob/main/taskweaver/planner/planner_prompt.yaml",children:"planner prompt"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"The following is an example of a planning example which contains 4 posts.\r\nEach post contains a message, a sender, a receiver, and a list of attachments."}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:'The first post is sent from the user to the planner.\r\nThe message is "count the rows of /home/data.csv", which is the same as the user query.'}),"\n",(0,r.jsxs)(t.li,{children:['The second post is sent from the planner to the code interpreter.\r\nThe message is "Please load the data file /home/data.csv and count the rows of the loaded data".\r\nThe attachment list contains 3 attachments:',"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The first attachment is the initial plan, which is a markdown string."}),"\n",(0,r.jsx)(t.li,{children:"The second attachment is the plan, which is a markdown string."}),"\n",(0,r.jsx)(t.li,{children:"The third attachment is the current plan step, which is a markdown string."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.li,{children:'The third post is sent from the code interpreter to the planner.\r\nThe message is "Load the data file /home/data.csv successfully and there are 100 rows in the data file".'}),"\n",(0,r.jsxs)(t.li,{children:['The fourth post is sent from the planner to the user.\r\nThe message is "The data file /home/data.csv is loaded and there are 100 rows in the data file".\r\nThe attachment list contains 3 attachments:',"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The first attachment is the initial plan, which is the same as the second attachment of the second post."}),"\n",(0,r.jsx)(t.li,{children:"The second attachment is the plan, which is the same as the third attachment of the second post."}),"\n",(0,r.jsx)(t.li,{children:"The third attachment is the current plan step, which is a markdown string."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"enabled: True\r\nrounds:\r\n  - user_query: count the rows of /home/data.csv\r\n    state: created\r\n    post_list:\r\n      - message: count the rows of /home/data.csv\r\n        send_from: User\r\n        send_to: Planner\r\n        attachment_list:\r\n      - message: Please load the data file /home/data.csv and count the rows of the loaded data\r\n        send_from: Planner\r\n        send_to: CodeInterpreter\r\n        attachment_list:\r\n        - type: init_plan\r\n          content: |-\r\n            1. load the data file\r\n            2. count the rows of the loaded data <sequentially depends on 1>\r\n            3. report the result to the user <interactively depends on 2>\r\n        - type: plan\r\n          content: |-\r\n            1. instruct CodeInterpreter to load the data file and count the rows of the loaded data\r\n            2. report the result to the user\r\n        - type: current_plan_step\r\n          content: 1. instruct CodeInterpreter to load the data file and count the rows of the loaded data\r\n      - message: Load the data file /home/data.csv successfully and there are 100 rows in the data file\r\n        send_from: CodeInterpreter\r\n        send_to: Planner\r\n        attachment_list:\r\n      - message: The data file /home/data.csv is loaded and there are 100 rows in the data file\r\n        send_from: Planner\r\n        send_to: User\r\n        attachment_list:\r\n          - type: init_plan\r\n            content: |-\r\n              1. load the data file\r\n              2. count the rows of the loaded data <sequentially depends on 1>\r\n              3. report the result to the user <interactively depends on 2>\r\n          - type: plan\r\n            content: |-\r\n              1. instruct CodeInterpreter to load the data file and count the rows of the loaded data\r\n              2. report the result to the user\r\n          - type: current_plan_step\r\n            content: 2. report the result to the user\n"})}),"\n",(0,r.jsx)(t.h2,{id:"code-interpreter-examples",children:"Code Interpreter Examples"}),"\n",(0,r.jsxs)(t.p,{children:["A code interpreter example tells LLMs how to generate code or orchestrate plugins to perform a specific task.\r\nThe task is from the planner. Before constructing the code interpreter example, we strongly encourage you to\r\nread the ",(0,r.jsx)(t.a,{href:"https://github.com/microsoft/TaskWeaver/blob/main/taskweaver/code_interpreter/code_generator/code_generator_prompt.yaml",children:"code generator prompt"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"The following is an example of a code interpreter example which contains 2 posts.\r\nEach post contains a message, a sender, a receiver, and a list of attachments."}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:'The first post is sent from the planner to the code interpreter.\r\nThe message is "Please read file /abc/def.txt".'}),"\n",(0,r.jsxs)(t.li,{children:['The second post is sent from the code interpreter to the planner.\r\nThe message is "read file /abc/def.txt".\r\nThe attachment list contains 6 attachments:',"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The first attachment is the thought of the code interpreter, which is a markdown string."}),"\n",(0,r.jsx)(t.li,{children:"The second attachment is the generated code, which is in python."}),"\n",(0,r.jsx)(t.li,{children:"The third attachment is the verification status, which is CORRECT, INCORRECT, or NONE."}),"\n",(0,r.jsx)(t.li,{children:"The fourth attachment is the verification error message, which is a markdown string."}),"\n",(0,r.jsx)(t.li,{children:"The fifth attachment is the execution status, which is SUCCESS, FAILURE, or NONE."}),"\n",(0,r.jsx)(t.li,{children:"The sixth attachment is the execution result, which is a markdown string."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:'enabled: True\r\nrounds:\r\n  - user_query: read file /abc/def.txt\r\n    state: finished\r\n    post_list:\r\n      - message: read file /abc/def.txt\r\n        send_from: Planner\r\n        send_to: CodeInterpreter\r\n        attachment_list: []\r\n      - message: I\'m sorry, I cannot find the file /abc/def.txt. An FileNotFoundException has been raised.\r\n        send_from: CodeInterpreter\r\n        send_to: Planner\r\n        attachment_list:\r\n          - type: thought\r\n            content: "{ROLE_NAME} will generate a code snippet to read the file /abc/def.txt and present the content to the user."\r\n          - type: python\r\n            content: |-\r\n              file_path = "/abc/def.txt"  \r\n\r\n              with open(file_path, "r") as file:  \r\n                  file_contents = file.read()  \r\n                  print(file_contents)\r\n          - type: verification\r\n            content: CORRECT\r\n          - type: code_error\r\n            content: No code error.\r\n          - type: execution_status\r\n            content: FAILURE\r\n          - type: execution_result\r\n            content: FileNotFoundException, the file /abc/def.txt does not exist.\n'})}),"\n",(0,r.jsxs)(t.p,{children:["In this example, ",(0,r.jsx)(t.code,{children:"verification"})," is about whether the generated code is correct or not.\r\nWe implemented a module to verify the generated code. If the code is syntactically incorrect,\r\nor the code violates the constraints, the verification status will be ",(0,r.jsx)(t.code,{children:"INCORRECT"}),"\r\nand some error messages will be returned.\r\nA verification of NONE means that the code has not been verified, which means verification has been turned off."]}),"\n",(0,r.jsxs)(t.p,{children:["In this example, ",(0,r.jsx)(t.code,{children:"execution_status"})," is about whether the generated code can be executed successfully or not.\r\nIf the execution is successful, the execution status will be ",(0,r.jsx)(t.code,{children:"SUCCESS"})," and the execution result will be returned.\r\nOtherwise, the execution status will be ",(0,r.jsx)(t.code,{children:"FAILURE"})," and some error messages will be returned.\r\nA execution_status of ",(0,r.jsx)(t.code,{children:"NONE"})," means that the code has not been executed."]})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var r=n(7294);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);