"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5111],{8722:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=t(5893),o=t(1151);const s={},a="Prompt Compression",i={id:"compression",title:"Prompt Compression",description:"After chatting for a few rounds, the chat history can become quite long, especially when we have code and execution results in it.",source:"@site/docs/compression.md",sourceDirName:".",slug:"/compression",permalink:"/TaskWeaver/docs/compression",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/TaskWeaver/tree/docs/website/docs/compression.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Customizing Examples",permalink:"/TaskWeaver/docs/customization/example/"},next:{title:"Configuration File",permalink:"/TaskWeaver/docs/configurations"}},h={},d=[{value:"Configurations",id:"configurations",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"prompt-compression",children:"Prompt Compression"}),"\n",(0,r.jsx)(n.p,{children:"After chatting for a few rounds, the chat history can become quite long, especially when we have code and execution results in it.\r\nThis can cause the problem of exceeding the context window of the LLMs.\r\nTo solve the problem, one way is to summarize the chat history a few rounds ago,\r\nand only keep the latest rounds of the chat history."}),"\n",(0,r.jsx)(n.p,{children:"Another way is to use a vector database to store the chat history entries, and only retrieve the last few rounds of the relevant\r\npart given the current user request. However, in TaskWeaver, code is also part of the chat history.\r\nIt is not an option to skip some intermediate code and execution results in order to correctly\r\ngenerate the code for the current user request. Therefore, we choose the first way to solve the problem."}),"\n",(0,r.jsx)(n.p,{children:"The following figure shows the idea of chat history summarization where the chat history is divided into two parts:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Rounds to compress: this part is summarized and only the summary is kept in the chat history. If the context_summary\r\nalready exists, a new summary is generated based on the previous summary adding the rounds to be summarized."}),"\n",(0,r.jsx)(n.li,{children:"Rounds to retain: this part is kept in the chat history without summarization."}),"\n"]}),"\n",(0,r.jsx)(n.mermaid,{value:"  flowchart LR\r\n      ConversationSummary--\x3eRound1\r\n      subgraph Rounds to compress \r\n          Round1--\x3eRound2\r\n      end\r\n      subgraph Rounds to retain\r\n          Round2--\x3eRound3--\x3eRound4--\x3eRound5    \r\n      end"}),"\n",(0,r.jsxs)(n.p,{children:["Imagine that, at the beginning, the ConversationSummary is empty.\r\nOnce the chat history reaches the ",(0,r.jsx)(n.code,{children:"rounds_to_compress"})," (default 2) rounds plus ",(0,r.jsx)(n.code,{children:"rounds_to_retain"})," (default 3) rounds,\r\nthe ConversationSummary is generated based on the ",(0,r.jsx)(n.code,{children:"rounds_to_compress"})," rounds and the ",(0,r.jsx)(n.code,{children:"rounds_to_retain"})," rounds are kept in the chat history.\r\nAfter that, there will be only ",(0,r.jsx)(n.code,{children:"rounds_to_retain"})," rounds in the chat history.\r\nThe next time the chat history reaches the ",(0,r.jsx)(n.code,{children:"rounds_to_compress"})," rounds plus ",(0,r.jsx)(n.code,{children:"rounds_to_retain"})," rounds,\r\nthe ConversationSummary is generated based on the ",(0,r.jsx)(n.code,{children:"rounds_to_compress"})," rounds and the previous ConversationSummary.\r\nWe use these two parameters to control the frequency of the chat history summarization."]}),"\n",(0,r.jsx)(n.p,{children:"An example of the chat history summarization in the Code Generator is shown below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\r\n  "ConversationSummary": "The user requested the generation of 100 random numbers, which was successfully executed. Then, the user asked to show the top 5 largest numbers from the generated random numbers. The assistant provided a code snippet to sort the generated random numbers in descending order and select the top 5 largest numbers, which was also successfully executed. After that, the user requested to plot the distribution of the 100 numbers, which was successfully executed. The user then asked to count the frequency of numbers in each bin of the histogram and identify the bin with the most numbers for the 0.1 bin width, which was also successfully executed.",\r\n  "Variables": [\r\n    {\r\n      "name": "random_numbers_100",\r\n      "type": "numpy array",\r\n      "description": "An array containing 100 random numbers generated using np.random.rand()"\r\n    },\r\n    {\r\n      "name": "top_5_largest",\r\n      "type": "numpy array",\r\n      "description": "An array containing the top 5 largest numbers from the generated random numbers"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The JSON object has two fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ConversationSummary: the summary of the chat history."}),"\n",(0,r.jsx)(n.li,{children:"Variables: the variables in the chat history that could be used in the current user request."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The chat history summary of the Planner has only the ConversationSummary field."}),"\n",(0,r.jsx)(n.p,{children:"The actual code generated in the summarized rounds is ignored and only the variables are kept in the summary\r\nso that the LLM can still refer the these variables in future code generation."}),"\n",(0,r.jsxs)(n.p,{children:["One thing to note is that chat history summarization requires call the LLM which incurs additional latency and cost.\r\nThe prompts for chat history summarization could be found for ",(0,r.jsx)(n.a,{target:"_blank",href:t(9585).Z+"",children:"planner"}),"\r\nand ",(0,r.jsx)(n.a,{target:"_blank",href:t(2327).Z+"",children:"code generator"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"configurations",children:"Configurations"}),"\n",(0,r.jsxs)(n.p,{children:["As explained above, there are two parameters in controlling the chat history summarization:\r\n",(0,r.jsx)(n.code,{children:"round_compressor.rounds_to_compress"})," (default 2) and ",(0,r.jsx)(n.code,{children:"round_compressor.rounds_to_retain"})," (default 3).\r\nTo enable the chat history summarization, you need to set ",(0,r.jsx)(n.code,{children:"planner.prompt_compression"}),"\r\nand ",(0,r.jsx)(n.code,{children:"code_generator.prompt_compression"})," to ",(0,r.jsx)(n.code,{children:"true"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},2327:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/files/compression_prompt-2d58508984354f808ed85734dfd09d8e.yaml"},9585:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/files/compression_prompt-d7803071f022edc7ebdde6e7142edaeb.yaml"},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>a});var r=t(7294);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);